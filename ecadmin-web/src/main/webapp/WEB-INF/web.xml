<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5"
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>classpath:config/applicationContext.xml</param-value>
  </context-param>
  <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->  
  <!-- 详细描述见http://blog.csdn.net/jadyer/article/details/11991457 --> 
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
  <!-- 实例化Spring容器 -->  
  <!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml -->
  <listener>
  	<listener-class>com.yinhai.ec.base.webframework.listener.HYContextListener</listener-class>
  </listener>
  <listener>
    <listener-class>net.sf.ehcache.constructs.web.ShutdownListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>
  
    <!-- SSO 单点登出配置  请放在最前面(可选)-->
    <!-- <listener>  
	    <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>  
	</listener>  
	<filter>  
	    <filter-name>singleSignOutFilter</filter-name>  
	    <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
	    <init-param>
	        <param-name>casServerUrlPrefix</param-name>
	        <param-value>http://localhost:8080/cas-server</param-value>
	    </init-param>
	</filter>  
	<filter-mapping>  
	    <filter-name>singleSignOutFilter</filter-name>  
	    <url-pattern>/*</url-pattern>  
	</filter-mapping> -->
	<!-- SSO 单点登出配置 -->
  
  <!-- POST中文乱码解决方案 -->
  <filter>  
    <filter-name>CharacterEncodingFilter</filter-name>  
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>  
        <param-name>encoding</param-name>  
        <param-value>utf-8</param-value>  
    </init-param>  
    <async-supported>true</async-supported>
  </filter>  
  <filter-mapping>  
    <filter-name>CharacterEncodingFilter</filter-name>  
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- druid监控filter配置 -->
  <filter>
      <filter-name>DruidWebStatFilter</filter-name>
      <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
      <init-param>  
      	<param-name>exclusions</param-name>  
        <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
      </init-param>
      <init-param>
      	<param-name>principalCookieName</param-name>
      	<param-value>HYSESSIONID</param-value>
      </init-param>
      <init-param>
      	<param-name>profileEnable</param-name>
      	<param-value>true</param-value>
      </init-param>
      <async-supported>true</async-supported>
  </filter>
  <filter-mapping>  
    <filter-name>DruidWebStatFilter</filter-name>  
    <url-pattern>/*</url-pattern>  
  </filter-mapping>
  <!-- druid servlet -->
  <servlet>
  	<servlet-name>DruidStatView</servlet-name>  
    <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    <init-param>  
        <!-- 允许清空统计数据 -->  
        <param-name>resetEnable</param-name>  
        <param-value>true</param-value>  
    </init-param>
    <init-param>  
        <!-- 用户名 -->  
        <param-name>loginUsername</param-name>  
        <param-value>druid</param-value>  
    </init-param>  
    <init-param>  
        <!-- 密码 -->  
        <param-name>loginPassword</param-name>  
        <param-value>druid</param-value>  
    </init-param>  
    <async-supported>true</async-supported>
  </servlet>  
  <servlet-mapping>  
    <servlet-name>DruidStatView</servlet-name>  
    <url-pattern>/druid/*</url-pattern>  
  </servlet-mapping>

  <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->  
  <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->  
  <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->  
  <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->  
  <filter>  
      <filter-name>shiroFilter</filter-name>  
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>  
      <init-param>
          <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->  
          <param-name>targetFilterLifecycle</param-name>  
          <param-value>true</param-value>  
      </init-param>
      <async-supported>true</async-supported>
  </filter>  
  <filter-mapping>  
      <filter-name>shiroFilter</filter-name>  
      <url-pattern>/*</url-pattern>  
  </filter-mapping> 
  
  <!-- spring mvc servlet -->
  <servlet>  
    <servlet-name>spring</servlet-name>  
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
    <init-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>classpath:config/spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>  
    <async-supported>true</async-supported>
  </servlet>
  <servlet-mapping>
    <servlet-name>spring</servlet-name>  
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <!-- dwr Servlet -->
  <servlet>
	  <display-name>DWR Servlet</display-name>
	  <servlet-name>dwr-invoker</servlet-name>  
	  <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
	  <init-param>
	     <param-name>debug</param-name>
	     <param-value>true</param-value>
	  </init-param>
	  <!-- 开启反向Ajax -->
	  <init-param>
	    <param-name>activeReverseAjaxEnabled</param-name>
	    <param-value>true</param-value>
	  </init-param>
	  <!-- 自定义的scriptSession manager -->
	  <init-param>
	    <param-name>org.directwebremoting.extend.ScriptSessionManager</param-name>
	    <param-value>com.yinhai.plugin.dwr.DWRScriptSessionManager</param-value>
	  </init-param>
	  <!-- 开启 polling mode, 默认 poll rate 5000-->
	  <init-param>
  		<param-name>org.directwebremoting.extend.ServerLoadMonitor</param-name>
  		<param-value>org.directwebremoting.impl.PollingServerLoadMonitor</param-value>
	  </init-param>
	  <init-param>
  		<param-name>disconnectedTime</param-name>
  		<param-value>60000</param-value>
	  </init-param>
  </servlet>
	
  <servlet-mapping>
	  <servlet-name>dwr-invoker</servlet-name>
	  <url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>

  <error-page>
    <error-code>401</error-code>
    <location>/UI/401.html</location>
  </error-page>
  <error-page>
    <error-code>403</error-code>
    <location>/UI/403.html</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/UI/404.html</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/UI/500.html</location>
  </error-page>
  
  <welcome-file-list>
      <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>
