<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
    
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
    	<!-- 合并sql -->
    	<property name="mergeSql" value="true" />
    	<!-- 慢sql记录 -->
    	<property name="slowSqlMillis" value="10000"></property>
    	<property name="logSlowSql" value="true"></property>
	</bean>
    
    
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
      <property name="dbType" value="mysql" />
      <!-- 对被认为是攻击的SQL进行LOG.error输出 -->
      <property name="logViolation" value="true"></property>
      <!-- 对被认为是攻击的SQL抛出SQLExcepton -->
      <property name="throwException" value="false"></property>
    </bean>
  	
  	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
  		<property name="resultSetLogEnabled" value="false"></property>
  		<property name="statementExecutableSqlLogEnable" value="true"></property>
	</bean>
  	
    <!-- 数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	<property name="driverClassName" value="${jdbc.driverClassName}"></property>
    	<property name="url" value="${jdbc.url}"></property>
    	<property name="username" value="${jdbc.username}"></property>
    	<property name="password" value="${jdbc.password}"></property>
    	<property name="initialSize" value="1" />
	 	<property name="minIdle" value="1" /> 
	   	<property name="maxActive" value="20" />
	   	<property name="maxWait" value="60000"></property>
	   	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	   	<property name="timeBetweenEvictionRunsMillis" value="60000" />
	   	 <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	   	<property name="minEvictableIdleTimeMillis" value="300000" />
	   	<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		<!-- 配置监控统计拦截的filters -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter"/>
				<ref bean="wall-filter"/>
				<ref bean="log-filter"/>
			</list>
		</property>
    </bean>
    
    <!-- dataSourceProxy 配置数据源代理-->
    <bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
    	<property name="targetDataSource" ref="dataSource"></property>
    </bean>
    
    <!-- 针对单一数据源的事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceProxy"></property>
	</bean>
	<!-- spring事务代理 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- AOP式事务管理,针对具体业务上的事务管理(这里需要自行管理) -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			<tx:method name="create*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			<tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			<tx:method name="remove*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			<tx:method name="fix*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice> -->
	
	<!-- 事务配置切入点 -->
	<!-- <aop:config>
		<aop:pointcut expression="* com.yinhai.health.service.impl.*.*(..)" id="perform"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="perform"/>
	</aop:config> -->
	
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceProxy"></property>
		<property name="configLocation" value="classpath:config/mybatis/config/configuration.xml"></property>
		<property name="mapperLocations">
			<list>
				<value>classpath:config/mybatis/mapper/*/*-mapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- 配置sqlSessionp -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<!-- 指定sqlSessionFactory -->
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
		<!-- 是否支持批量操作 -->
		<!-- <constructor-arg index="1" value="BATCH"></constructor-arg> -->
		<constructor-arg index="1" value="SIMPLE"></constructor-arg>
	</bean>
	
	<!-- 设置baseService -->
	<bean id="baseService" class="com.yinhai.ec.base.service.impl.BaseServiceImpl" abstract="true"></bean>
</beans>